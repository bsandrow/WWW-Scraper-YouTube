#!/usr/bin/perl -w

use strict;
use warnings;
use Getopt::Long;
use LWP::Simple qw/getstore/;
use WWW::Scraper::YouTube;

$|++;

my %opt = (
    order => [35,34,6,5],
);
GetOptions(
    \%opt,
    'i',
    'order|o=s',
    'help|h',
    'dir|d=s',
    'title!|t',
    ) or usage();
usage() if $opt{help};

for (@ARGV) {
    if ($opt{i}) {
        exit(interactive($_));
    }
    else {
        exit(noninteractive($_));
    }
}

sub interactive {
    my $url = shift;
    my $yt = new WWW:Scraper::YouTube;
    $yt->parse($url);
    my $formats = $yt->formats();

    # Prompt for format selection
    my $selected_format;
    for (@$formats) {
        print STDOUT "${_}: @{[ $yt->format_description($_) ]}\n";
    }
    print STDOUT "Select a format: ";
    while(<STDIN>) {
        chomp;
        if (number_in_list($_,$formats) {
            $selected_format = $_;
            last;
        }
        print STDOUT "Invalid format selected!\n";
        print STDOUT "Select a format: ";
    }

    # Prompt for a filename
    my $filename = "@{[ $yt->get_title() ]}.@{[ $yt->format_filetype($_) ]}";
    print STDOUT "Please enter a filename (default: "$filename"): ";
    while(<STDIN>) {
        chomp;
        if (-w "$_") {
            $filename = $_;
        }
        print STDOUT "Unable to use that filename!\n";
        print STDOUT "Please enter a filename (default: "$filename"): ";
    }
    my $direct_video_url = $yt->get_url($_);

    print STDOUT "Video Page Url: $url\n";
    print STDOUT "Video Direct Url: $direct_video_url\n";
    print STDOUT "Output file: $filename\n";

    print STDOUT "Downloading file...\n";
    my $rc = getstore($direct_video_url,$file);
    if (is_success($rc)) {
        print STDOUT "Download successful.\n";
    }
    else {
        print STDOUT "Download failed. [HTTP Response Code = $rc]\n";
    }
    return;
}

# NON-INTERACTIVE
sub noninteractive {
    my $url = shift;
    my $yt = new WWW::Scraper::YouTube;
    $yt->parse($url);
    my $formats = $yt->formats();

    for (@{$opt{order}}) {
        if(number_in_list($_,$formats)) {
            my $direct_video_url = $yt->get_url($_);
            my $file             = determine_filename($yt,$_);

            print STDOUT "Downloading '$url' -> '$file'\n";
            getstore($direct_video_url,$file);
            return 0;
        }
    }
    print STDOUT "Avaialble video formats not in 'auto try' list.\n";
    return 1;
}

# MISC
sub determine_filename {
    my $yt = shift;
    my $format = shift;
    if($opts{title}) { 
        return "@{[ $yt->get_title() ]}.@{[ $yt->format_filetype($format) ]}";
    }
    else {
        return "@{[ $yt->get_video_id() ]}.@{[ $yt->format_filetype($format) ]}";
    }
}
sub number_in_list {
    my $number = shift;
    my $list   = shift;
    map { return 1 if "$number" eq "$_" } @$list;
    return 0;
}
sub usage {
    print STDERR <<"HERE";
getyt - YouTube Downloader

getyt [options] URL1 URL2 URL3

Options:

    -i                 Interactive  Mode (unimplemented)
    -o, --order=LIST   Provide a comma separated list of format codes
                       describing the order of precedence to use when deciding
                       which format to download the video in (when in
                       non-interactive mode).
    -d, --dir=DIR      Specify a directory to download the files to.
    -t, --title        Use the title of the video for the filename. [default]
        --notitle      Use the id of the video for the filename.
HERE
}
